{"version":3,"file":"posts.js","sources":["../../src/utils/createOptimizedPicture.ts","../../src/blocks/posts/posts.ts"],"sourcesContent":["/**\n * Returns a picture element with webp and fallbacks\n * @param {string} src The image URL\n * @param {string} [alt] The image alternative text\n * @param {boolean} [eager] Set loading attribute to eager\n * @param {Array} [breakpoints] Breakpoints and corresponding params (eg. width)\n * @returns {Element} The picture element\n */\n\ninterface CreateOptimizedPictureArgs {\n  src: string;\n  alt: string;\n  eager?: boolean;\n  breakpoints?: Array<Record<string, string>>;\n}\n\nexport function createOptimizedPicture(args: CreateOptimizedPictureArgs): HTMLPictureElement {\n  const {\n    src,\n    alt,\n    eager = false,\n    breakpoints = [{ media: '(min-width: 600px)', width: '2000' }, { width: '750' }],\n  } = args;\n  const url = new URL(src, window.location.href);\n  const picture = document.createElement('picture');\n  const { pathname } = url;\n  const ext = pathname.substring(pathname.lastIndexOf('.') + 1);\n\n  // webp\n  breakpoints.forEach((br) => {\n    const source = document.createElement('source');\n    if (br.media) source.setAttribute('media', br.media);\n    source.setAttribute('type', 'image/webp');\n    source.setAttribute('srcset', `${pathname}?width=${br.width}&format=webply&optimize=medium`);\n    picture.appendChild(source);\n  });\n\n  // fallback\n  breakpoints.forEach((br, i) => {\n    if (i < breakpoints.length - 1) {\n      const source = document.createElement('source');\n      if (br.media) source.setAttribute('media', br.media);\n      source.setAttribute('srcset', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n      picture.appendChild(source);\n    } else {\n      const img = document.createElement('img');\n      img.setAttribute('loading', eager ? 'eager' : 'lazy');\n      img.setAttribute('alt', alt);\n      picture.appendChild(img);\n      img.setAttribute('src', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n    }\n  });\n\n  return picture;\n}\n","import { html, render } from 'lit';\nimport { createOptimizedPicture } from '../../utils/createOptimizedPicture';\n\ninterface PostArgs {\n  postUrl: string;\n  headline?: string;\n  text?: string;\n  picture: HTMLPictureElement;\n}\n\nconst postTemplate = (args: PostArgs) => {\n  const { postUrl, headline, text, picture } = args;\n  return html`\n    <article>\n      <a href=\"${postUrl}\" class=\"image\">${picture}</a>\n      <h3>${headline}</h3>\n      <p>${text?.slice(0, 200)}</p>\n      <ul class=\"actions\">\n        <li><a href=\"${postUrl}\" class=\"button\">More</a></li>\n      </ul>\n    </article>\n  `;\n};\n\nconst template = (posts: PostArgs[]) => {\n  return posts.map((post) => postTemplate(post));\n};\n\nexport default async function (block: HTMLElement) {\n  block.innerHTML = '';\n\n  const req = await fetch(`${window.hlx.codeBasePath}/query-index.json`);\n  const response = await req.json();\n\n  const data = response.data\n    .filter((item) => {\n      return item.path.includes('/posts');\n    })\n    .map((item) => item);\n\n  const postsPreview = await Promise.all(\n    data.map(async (post) => {\n      const result = await fetch(`${window.hlx.codeBasePath}${post.path}.plain.html`);\n      return result.text();\n    })\n  );\n\n  const postsPreviewHtml = postsPreview.map((res) => {\n    var parser = new DOMParser();\n    return parser.parseFromString(res, 'text/html');\n  });\n\n  const posts = postsPreviewHtml.map((doc, index) => {\n    return {\n      postUrl: `${window.hlx.codeBasePath}${data[index].path}`,\n      headline: doc.querySelector('h1')?.innerText || doc.querySelector('h2')?.innerText,\n      text: doc.querySelector('p')?.innerText?.trim(),\n      picture: createOptimizedPicture({ src: data[index].image, alt: data[index].imagealt }),\n    };\n  });\n\n  block.style.removeProperty('display');\n  render(template(posts), block);\n}\n"],"names":["createOptimizedPicture","args","src","alt","eager","breakpoints","url","picture","pathname","ext","br","source","i","img","postTemplate","postUrl","headline","text","html","template","posts","post","block","data","item","res","parser","doc","index","_a","_b","_d","_c","render"],"mappings":"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"}
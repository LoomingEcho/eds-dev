{"version":3,"file":"posts.js","sources":["../../src/blocks/posts/posts.ts"],"sourcesContent":["import { html, nothing, render } from 'lit';\nimport { createOptimizedPicture } from '../../utils/createOptimizedPicture';\n\ninterface PostArgs {\n  postUrl: string;\n  headline?: string;\n  text?: string;\n  picture: HTMLPictureElement;\n}\n\nconst renderHeadline = (headline?: string) => {\n  if (!headline) return nothing;\n  return html`<h3>${headline}</h3>`;\n};\n\nconst renderText = (text?: string) => {\n  if (!text) return nothing;\n  if (text.length > 200) {\n    return html`<p>${text.slice(0, 200)}...</p>`;\n  }\n  return html`<p>${text}</p>`;\n};\n\nconst postTemplate = (args: PostArgs) => {\n  const { postUrl, headline, text, picture } = args;\n  return html`\n    <article>\n      <a href=\"${postUrl}\" class=\"image\">${picture}</a>\n      ${renderHeadline(headline)} ${renderText(text)}\n      <ul class=\"actions\">\n        <li><a href=\"${postUrl}\" class=\"button\">Goto Post</a></li>\n      </ul>\n    </article>\n  `;\n};\n\nconst template = (posts: PostArgs[]) => {\n  return posts.map((post) => postTemplate(post));\n};\n\nexport default async function (block: HTMLElement) {\n  block.innerHTML = '';\n\n  const req = await fetch(`${window.hlx.codeBasePath}/query-index.json`);\n  const response = await req.json();\n\n  const data = response.data.filter((item) => {\n    return item.path.includes('/posts');\n  });\n\n  const postsPreview = await Promise.all(\n    data.map(async (post) => {\n      const result = await fetch(`${window.hlx.codeBasePath}${post.path}.plain.html`);\n      return result.text();\n    })\n  );\n\n  const postsPreviewHtml = postsPreview.map((res) => {\n    var parser = new DOMParser();\n    return parser.parseFromString(res, 'text/html');\n  });\n\n  // TODO: Candidate for a EDS helper function???\n  const getFirstParagraph = (doc: Document): string | undefined => {\n    const paragraphs = Array.from(doc.querySelectorAll('p'));\n    return paragraphs.find((p) => p.innerText.trim().length > 0)?.innerText || undefined;\n  };\n\n  const posts = postsPreviewHtml.map((doc, index) => {\n    return {\n      postUrl: `${window.hlx.codeBasePath}${data[index].path}`,\n      headline: doc.querySelector('h1')?.innerText || doc.querySelector('h2')?.innerText,\n      text: getFirstParagraph(doc),\n      picture: createOptimizedPicture({ src: data[index].image, alt: data[index].imagealt }),\n    };\n  });\n\n  block.style.removeProperty('display');\n  render(template(posts), block);\n}\n"],"names":["renderHeadline","headline","html","nothing","renderText","text","postTemplate","args","postUrl","picture","template","posts","post","block","data","item","postsPreviewHtml","res","parser","getFirstParagraph","doc","_a","p","index","_b","createOptimizedPicture","render"],"mappings":"6IAUA,MAAMA,EAAkBC,GACjBA,EACEC,QAAWD,CAAQ,QADJE,EAIlBC,EAAcC,GACbA,EACDA,EAAK,OAAS,IACTH,OAAUG,EAAK,MAAM,EAAG,GAAG,CAAC,UAE9BH,OAAUG,CAAI,OAJHF,EAOdG,EAAgBC,GAAmB,CACvC,KAAM,CAAE,QAAAC,EAAS,SAAAP,EAAU,KAAAI,EAAM,QAAAI,GAAYF,EACtC,OAAAL,sBAEQM,CAAO,mBAAmBC,CAAO,QAC1CT,EAAeC,CAAQ,CAAC,IAAIG,EAAWC,CAAI,CAAC,oCAE7BG,CAAO,oDAI9B,EAEME,EAAYC,GACTA,EAAM,IAAKC,GAASN,EAAaM,CAAI,CAAC,EAG/C,eAAAD,EAA+BE,EAAoB,CACjDA,EAAM,UAAY,GAKlB,MAAMC,GAFW,MADL,MAAM,MAAM,GAAG,OAAO,IAAI,YAAY,mBAAmB,GAC1C,QAEL,KAAK,OAAQC,GAC1BA,EAAK,KAAK,SAAS,QAAQ,CACnC,EASKC,GAPe,MAAM,QAAQ,IACjCF,EAAK,IAAI,MAAOF,IACC,MAAM,MAAM,GAAG,OAAO,IAAI,YAAY,GAAGA,EAAK,IAAI,aAAa,GAChE,MACf,CAAA,GAGmC,IAAKK,GAAQ,CAC7C,IAAAC,EAAS,IAAI,UACV,OAAAA,EAAO,gBAAgBD,EAAK,WAAW,CAAA,CAC/C,EAGKE,EAAqBC,GAAsC,OAExD,QAAAC,EADY,MAAM,KAAKD,EAAI,iBAAiB,GAAG,CAAC,EACrC,KAAME,GAAMA,EAAE,UAAU,KAAO,EAAA,OAAS,CAAC,IAApD,YAAAD,EAAuD,YAAa,MAAA,EAGvEV,EAAQK,EAAiB,IAAI,CAACI,EAAKG,IAAU,SAC1C,MAAA,CACL,QAAS,GAAG,OAAO,IAAI,YAAY,GAAGT,EAAKS,CAAK,EAAE,IAAI,GACtD,WAAUF,EAAAD,EAAI,cAAc,IAAI,IAAtB,YAAAC,EAAyB,cAAaG,EAAAJ,EAAI,cAAc,IAAI,IAAtB,YAAAI,EAAyB,WACzE,KAAML,EAAkBC,CAAG,EAC3B,QAASK,EAAuB,CAAE,IAAKX,EAAKS,CAAK,EAAE,MAAO,IAAKT,EAAKS,CAAK,EAAE,SAAU,CAAA,CACvF,CACD,EAEKV,EAAA,MAAM,eAAe,SAAS,EAC7Ba,EAAAhB,EAASC,CAAK,EAAGE,CAAK,CAC/B"}